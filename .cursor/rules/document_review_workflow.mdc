---
description: 
globs: 
alwaysApply: false
---
# ドキュメントレビュー・ワークフロー規約

## 概要
本規約は、fcode プロジェクトにおいて **AI（Cursor o3 & Claude MCP）を用いたドキュメントレビュー** を実施する際の標準フローを定義する。

---
## 1. ワークフロー全体像
1. **Plan 提示**
   - いきなりレビューを始めず、まず **Cursor o3 モデル** が作業計画（Plan）を Markdown で提案。
   - Plan には対象ファイル、評価観点、役割分担、手順、成果物を含める。
2. **レビュー開始（自動）**
   - 初稿提出時点で方向性は確認済みのため、ユーザー承認を待たずにレビューを開始する。
3. **Step-0: ドキュメント棚卸し**
   - 見出し抽出 (`grep "^#+"`) などで章構造を一覧化。
   - ファイル × 見出し × キーワードのマッピング表を作る。
4. **Step-1: Cursor o3 一次レビュー**
   - 評価観点①〜④（正確性／一貫性／完全性／最新性）をチェックし矛盾リストを起票。
5. **Step-2: Claude MCP レビュー**
   - 実装者観点を重点確認：実装容易性・可読性・拡張性に加え、**実現可能性（現実的か？潜在リスクは？技術選定の妥当性）、パフォーマンス／スケーラビリティ** などをレビュー。
6. **Step-3: コメント統合**
   - Cursor o3 が全コメントを統合し、重要度 (Critical/Major/Minor) を付与。
7. **Step-4: 改善提案生成**
   - `docs-review-report.md` を生成。必要があればパッチ例を添付。
8. **Step-5: 修正フェーズ**
   - スコア 9/10 以上になるまで Cursor o3 と Claude を中心にドキュメントを改訂し、Cursor o3 が最終承認を行う。

---
## 2. 評価観点
| 番号 | 観点           | 説明 |
|------|----------------|------|
| ①    | 正確性         | 技術的誤りがないか |
| ②    | 一貫性         | 用語・命名・粒度の整合 |
| ③    | 完全性         | 必要情報の漏れがないか |
| ④    | 最新性         | 実装・検証結果と乖離がないか |
| ⑤    | 可読性         | 構成・記述の分かりやすさ |
| ⑥    | リスク/非目標  | 範囲外とリスクの明快さ |

---
## 3. Cursor o3 と Claude MCP の役割分担
- **Cursor o3**: ドキュメント収集・一次チェック・統合レポート作成、開発者レビュー/提案の妥当性評価、全体評価、最終承認を担当。
- **Claude MCP**: 実装者観点のレビューを担当。具体的には、実装容易性・可読性・拡張性、実現可能性、潜在リスク、技術選定の妥当性、パフォーマンス／スケーラビリティを評価。

---
## 4. 出力 & スコアリング
- 成果物: `docs-review-report.md`、`docs-review-matrix.csv`、必要に応じたパッチ例。
- 信頼値スコア: 各評価観点を 0.0〜1.0 点で採点し、合計 10 点満点とする。
- 目標: **承認基準** は「合計 9 点以上 **かつ** 各評価観点が 0.7 点以上」でリリース可。10 点 = 指摘ゼロ。
   - いずれかの観点で 0.7 未満（著しく低い評価）がある場合、合計が 9 点を超えていても再修正が必要。
- アクションアイテムには **Story Points (Fibonacci: 1/2/3/5/8/13 …)** を必ず付与する。期限は AI チーム側では設定せず、スプリント計画は SP 合計で管理する。

---
## 5. コーディング・ドキュメント編集ガイド
- Markdown 内にネストしたコードブロックを置く場合、外側 ```、内側 ~~~ を使用。
- "Single Source of Truth" (SSOT) ドキュメントはリンク参照で一元管理。
- コメント行で "(非採用)" "TODO" が残った場合は Issue 化して本文から削除。

---
## 6. プロジェクトルール優先度
1. `.cursor/rules` に記載の既存ルール（最優先）
2. 本ワークフロー規約
3. プロジェクトドキュメント (PRD / architecture)
4. 一般的ベストプラクティス

---
## 7. 改訂とメンテナンス
- 規約の変更は Pull Request で行い、PM 承認を必須とする。
- 半期に一度、ドキュメントヘルスチェックでルールの陳腐化を点検。
