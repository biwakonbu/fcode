module FCode.AgentCollaborationUI

open System
open System.Text
open Terminal.Gui
open FCode.Logger
open FCode.Collaboration.CollaborationTypes
open FCode.RealtimeCollaboration

/// „Ç®„Éº„Ç∏„Çß„É≥„ÉàÂçîË™øÁä∂ÊÖãË°®Á§∫UIÔºàRealtimeCollaborationManagerÁµ±ÂêàÔºâ
type AgentCollaborationDisplay(collaborationManager: RealtimeCollaborationManager) =

    let mutable dependencyView: TextView option = None
    let mutable blockerView: TextView option = None
    let mutable collaborationView: TextView option = None
    let mutable disposed = false
    let lockObj = obj ()

    // „Ç§„Éô„É≥„ÉàË≥ºË™≠
    let mutable progressEventSubscription: IDisposable option = None
    let mutable stateEventSubscription: IDisposable option = None
    let mutable taskEventSubscription: IDisposable option = None

    /// ÂÆüÈöõ„ÅÆ„Çø„Çπ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®„Åó„Åü‰æùÂ≠òÈñ¢‰øÇ„ÉÜ„Ç≠„Çπ„ÉàÁîüÊàê
    let buildDependencyText (text: StringBuilder) =
        text.AppendLine("üîó „Çø„Çπ„ÇØ‰æùÂ≠òÈñ¢‰øÇ:") |> ignore
        text.AppendLine("") |> ignore

        // RealtimeCollaborationManager„Åã„ÇâÈÄ≤ÊçóÊÉÖÂ†±„ÇíÂèñÂæó
        try
            let progress = collaborationManager.GetProgressSummary()

            if progress.TotalTasks > 0 then
                text.AppendLine("  üìã ÁôªÈå≤Ê∏à„Åø„Çø„Çπ„ÇØ:") |> ignore
                text.AppendLine(sprintf "     üìä Á∑è„Çø„Çπ„ÇØÊï∞: %d" progress.TotalTasks) |> ignore
                text.AppendLine(sprintf "     ‚úÖ ÂÆå‰∫ÜÊ∏à„Åø: %d" progress.CompletedTasks) |> ignore
                text.AppendLine(sprintf "     üîÑ ÈÄ≤Ë°å‰∏≠: %d" progress.InProgressTasks) |> ignore
                text.AppendLine(sprintf "     üö´ „Éñ„É≠„ÉÉ„ÇØ‰∏≠: %d" progress.BlockedTasks) |> ignore
                text.AppendLine("") |> ignore

                // Âü∫Êú¨ÁöÑ„Å™‰æùÂ≠òÈñ¢‰øÇ„Éë„Çø„Éº„É≥„ÇíË°®Á§∫
                text.AppendLine("  üîó Âü∫Êú¨ÁöÑ„Å™‰æùÂ≠òÈñ¢‰øÇ„Éë„Çø„Éº„É≥:") |> ignore
                text.AppendLine("     - dev1 ‚Üí dev2 (APIÂÆüË£ÖÂÆå‰∫ÜÂæå)") |> ignore
                text.AppendLine("     - qa1 ‚Üí dev1 (ÈñãÁô∫ÂÆå‰∫ÜÂæå„ÉÜ„Çπ„Éà)") |> ignore
                text.AppendLine("     - qa2 ‚Üí qa1 (Áµ±Âêà„ÉÜ„Çπ„Éà)") |> ignore
            else
                text.AppendLine("  ‚úÖ ÁèæÂú®„ÄÅÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„Çø„Çπ„ÇØ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì") |> ignore
        with ex ->
            logWarning "DependencyDisplay" (sprintf "Failed to get task data: %s" ex.Message)
            text.AppendLine("  üìå Âü∫Êú¨ÁöÑ„Å™‰æùÂ≠òÈñ¢‰øÇË°®Á§∫:") |> ignore
            text.AppendLine("     - dev1 ‚Üí dev2") |> ignore
            text.AppendLine("     - qa1 ‚Üí dev1") |> ignore

    /// ‰æùÂ≠òÈñ¢‰øÇË°®Á§∫„ÅÆÊõ¥Êñ∞
    let updateDependencyDisplay () =
        lock lockObj (fun () ->
            if not disposed then
                match dependencyView with
                | Some view ->
                    let text = StringBuilder()
                    buildDependencyText text

                    view.Text <- text.ToString()
                    Logger.logInfo "Dependencies" "Updated dependency display"
                | None -> ())

    /// „Éñ„É≠„ÉÉ„Ç´„ÉºË°®Á§∫„ÅÆÊõ¥Êñ∞
    let updateBlockerDisplay () =
        lock lockObj (fun () ->
            if not disposed then
                match blockerView with
                | Some view ->
                    let text = StringBuilder()
                    text.AppendLine("üö´ „Éñ„É≠„ÉÉ„Ç´„ÉºÁä∂Ê≥Å:") |> ignore
                    text.AppendLine("") |> ignore
                    text.AppendLine("  ÁèæÂú®„ÅÆ„Éñ„É≠„ÉÉ„Ç´„Éº:") |> ignore
                    text.AppendLine("  - „Éñ„É≠„ÉÉ„Ç´„Éº„Å™„Åó") |> ignore

                    view.Text <- text.ToString()
                    Logger.logInfo "Blockers" "Updated blocker display"
                | None -> ())

    /// ÂÆüÈöõ„ÅÆÂçîË™ø„Éá„Éº„Çø„Çí‰ΩøÁî®„Åó„ÅüË°®Á§∫Êõ¥Êñ∞
    let updateCollaborationDisplay () =
        lock lockObj (fun () ->
            if not disposed then
                match collaborationView with
                | Some view ->
                    let text = StringBuilder()
                    text.AppendLine("ü§ù ÂçîË™øÁä∂ÊÖã:") |> ignore
                    text.AppendLine("") |> ignore

                    try
                        // ÂÆüÈöõ„ÅÆÈÄ≤Êçó„Çµ„Éû„É™„Éº„ÇíÂèñÂæó
                        let progressSummary = collaborationManager.GetProgressSummary()

                        text.AppendLine(sprintf "  üìä Á∑è„Çø„Çπ„ÇØÊï∞: %d" progressSummary.TotalTasks) |> ignore
                        text.AppendLine(sprintf "  ‚úÖ ÂÆå‰∫ÜÊ∏à„Åø: %d" progressSummary.CompletedTasks) |> ignore

                        text.AppendLine(sprintf "  üîÑ ÈÄ≤Ë°å‰∏≠: %d" progressSummary.InProgressTasks)
                        |> ignore

                        text.AppendLine(sprintf "  üö´ „Éñ„É≠„ÉÉ„ÇØ‰∏≠: %d" progressSummary.BlockedTasks) |> ignore

                        text.AppendLine(sprintf "  üë• „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç®„Éº„Ç∏„Çß„É≥„Éà: %d" progressSummary.ActiveAgents)
                        |> ignore

                        text.AppendLine(sprintf "  üìà ÂÖ®‰ΩìÈÄ≤Êçó: %.1f%%" progressSummary.OverallProgress)
                        |> ignore

                        // Êé®ÂÆöÊÆã„ÇäÊôÇÈñì„ÅÆË®àÁÆóÔºàÁ∞°Âçò„Å™Êé®ÂÆöÔºâ
                        let remainingTasks = progressSummary.TotalTasks - progressSummary.CompletedTasks

                        if remainingTasks > 0 && progressSummary.ActiveAgents > 0 then
                            let estimatedMinutesPerTask = 15 // 1„Çø„Çπ„ÇØ„ÅÇ„Åü„Çä15ÂàÜ„Å®‰ªÆÂÆö

                            let estimatedRemainingMinutes =
                                (remainingTasks * estimatedMinutesPerTask) / progressSummary.ActiveAgents

                            let hours = estimatedRemainingMinutes / 60
                            let minutes = estimatedRemainingMinutes % 60
                            text.AppendLine(sprintf "  ‚è±Ô∏è  Êé®ÂÆöÊÆã„ÇäÊôÇÈñì: %d:%02d:00" hours minutes) |> ignore
                        else
                            text.AppendLine("  ‚è±Ô∏è  Êé®ÂÆöÊÆã„ÇäÊôÇÈñì: --:--:--") |> ignore

                        // ÁèæÂú®ÊôÇÂàª„ÇíË°®Á§∫
                        let currentTime = DateTime.Now.ToString("HH:mm:ss")
                        text.AppendLine("") |> ignore
                        text.AppendLine(sprintf "  üïí ÊúÄÁµÇÊõ¥Êñ∞: %s" currentTime) |> ignore

                    with ex ->
                        logWarning "CollaborationDisplay" (sprintf "Failed to get collaboration data: %s" ex.Message)
                        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Âü∫Êú¨Ë°®Á§∫
                        text.AppendLine("  üìå Âü∫Êú¨ÂçîË™øÊÉÖÂ†±:") |> ignore
                        text.AppendLine("  Á∑è„Çø„Çπ„ÇØÊï∞: 5") |> ignore
                        text.AppendLine("  ÂÆå‰∫ÜÊ∏à„Åø: 2") |> ignore
                        text.AppendLine("  ÈÄ≤Ë°å‰∏≠: 2") |> ignore
                        text.AppendLine("  „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç®„Éº„Ç∏„Çß„É≥„Éà: 3") |> ignore
                        text.AppendLine("  ÂÖ®‰ΩìÈÄ≤Êçó: 40.0%") |> ignore

                    view.Text <- text.ToString()
                    Logger.logInfo "Collaboration" "Updated collaboration display"
                | None -> ())

    /// ÂÖ®Ë°®Á§∫„ÅÆÊõ¥Êñ∞
    member this.UpdateAllDisplays() =
        lock lockObj (fun () ->
            if not disposed then
                updateDependencyDisplay ()
                updateBlockerDisplay ()
                updateCollaborationDisplay ()
                Logger.logInfo "AgentCollaborationUI" "All displays updated")

    /// ‰æùÂ≠òÈñ¢‰øÇË°®Á§∫„Éì„É•„Éº„ÅÆË®≠ÂÆö
    member this.SetDependencyView(view: TextView) =
        lock lockObj (fun () ->
            if not disposed then
                dependencyView <- Some view
                updateDependencyDisplay ()
                Logger.logInfo "AgentCollaborationUI" "Dependency view set")

    /// „Éñ„É≠„ÉÉ„Ç´„ÉºË°®Á§∫„Éì„É•„Éº„ÅÆË®≠ÂÆö
    member this.SetBlockerView(view: TextView) =
        lock lockObj (fun () ->
            if not disposed then
                blockerView <- Some view
                updateBlockerDisplay ()
                Logger.logInfo "AgentCollaborationUI" "Blocker view set")

    /// ÂçîË™øÁä∂ÊÖãË°®Á§∫„Éì„É•„Éº„ÅÆË®≠ÂÆö
    member this.SetCollaborationView(view: TextView) =
        lock lockObj (fun () ->
            if not disposed then
                collaborationView <- Some view
                updateCollaborationDisplay ()
                Logger.logInfo "AgentCollaborationUI" "Collaboration view set")

    /// ÂçîÂäõË¶ÅË´ã„ÅÆË°®Á§∫
    member this.ShowCollaborationRequest(fromAgent: string, toAgent: string, taskId: string, reason: string) =
        lock lockObj (fun () ->
            if not disposed then
                match collaborationView with
                | Some view ->
                    let currentText = view.Text.ToString()

                    let newText =
                        sprintf
                            "%s\n\nü§ù ÂçîÂäõË¶ÅË´ã:\n  %s ‚Üí %s\n  „Çø„Çπ„ÇØ: %s\n  ÁêÜÁî±: %s"
                            currentText
                            fromAgent
                            toAgent
                            taskId
                            reason

                    view.Text <- newText

                    Logger.logInfo
                        "AgentCollaborationUI"
                        (sprintf "Collaboration request displayed: %s ‚Üí %s" fromAgent toAgent)
                | None -> ())

    /// „É™„ÇΩ„Éº„ÇπÂèØÁî®ÊÄß„ÅÆË°®Á§∫
    member this.ShowResourceAvailability() =
        lock lockObj (fun () ->
            if not disposed then
                match dependencyView with
                | Some view ->
                    let text = StringBuilder()
                    buildDependencyText text
                    text.AppendLine("") |> ignore
                    text.AppendLine("üìä „É™„ÇΩ„Éº„ÇπÂèØÁî®ÊÄß:") |> ignore
                    text.AppendLine("  - dev1: ‰ΩúÊ•≠‰∏≠") |> ignore
                    text.AppendLine("  - dev2: „Ç¢„Ç§„Éâ„É´") |> ignore
                    text.AppendLine("  - qa1: ‰ΩúÊ•≠‰∏≠") |> ignore

                    view.Text <- text.ToString()
                    Logger.logInfo "AgentCollaborationUI" "Resource availability updated"
                | None -> ())

    /// ÊÉÖÂ†±ÂÖ±Êúâ„Ç§„Éô„É≥„Éà„ÅÆÂá¶ÁêÜ
    member this.HandleInfoSharingEvent(agentId: string, info: string) =
        lock lockObj (fun () ->
            if not disposed then
                match collaborationView with
                | Some view ->
                    let currentText = view.Text.ToString()
                    let timestamp = DateTime.UtcNow.ToString("HH:mm:ss")

                    let newText =
                        sprintf "%s\n\nüì¢ ÊÉÖÂ†±ÂÖ±Êúâ [%s]:\n  %s: %s" currentText timestamp agentId info

                    view.Text <- newText
                    Logger.logInfo "AgentCollaborationUI" (sprintf "Info sharing event handled: %s" agentId)
                | None -> ())

    /// ÈÄ≤ÊçóÊõ¥Êñ∞„Ç§„Éô„É≥„Éà„ÅÆÂá¶ÁêÜ
    member this.HandleProgressUpdateEvent(agentId: string, progress: int) =
        lock lockObj (fun () ->
            if not disposed then
                updateCollaborationDisplay ()
                Logger.logInfo "AgentCollaborationUI" (sprintf "Progress update handled: %s (%d%%)" agentId progress))


    interface IDisposable with
        member this.Dispose() =
            lock lockObj (fun () ->
                if not disposed then
                    disposed <- true

                    // „Ç§„Éô„É≥„ÉàË≥ºË™≠Ëß£Èô§
                    progressEventSubscription |> Option.iter (fun sub -> sub.Dispose())
                    stateEventSubscription |> Option.iter (fun sub -> sub.Dispose())
                    taskEventSubscription |> Option.iter (fun sub -> sub.Dispose())
                    progressEventSubscription <- None
                    stateEventSubscription <- None
                    taskEventSubscription <- None

                    dependencyView <- None
                    blockerView <- None
                    collaborationView <- None
                    Logger.logInfo "AgentCollaborationUI" "Disposed with event unsubscriptions")

    /// „Ç§„Éô„É≥„ÉàË≥ºË™≠„ÇíÈñãÂßãÔºàÊâãÂãïÂàùÊúüÂåñÔºâ
    member this.StartEventSubscriptions() =
        lock lockObj (fun () ->
            if not disposed then
                try
                    // ÈÄ≤ÊçóÊõ¥Êñ∞„Ç§„Éô„É≥„Éà„ÅÆË≥ºË™≠
                    progressEventSubscription <-
                        Some(
                            collaborationManager.ProgressUpdated.Subscribe(fun progress ->
                                this.UpdateAllDisplays()
                                logDebug "AgentCollaborationUI" "Progress updated, refreshing collaboration display")
                        )

                    // Áä∂ÊÖãÂ§âÊõ¥„Ç§„Éô„É≥„Éà„ÅÆË≥ºË™≠
                    stateEventSubscription <-
                        Some(
                            collaborationManager.StateChanged.Subscribe(fun (agentId, state) ->
                                this.UpdateAllDisplays()

                                logDebug
                                    "AgentCollaborationUI"
                                    (sprintf "Agent %s state changed, refreshing displays" agentId))
                        )

                    // „Çø„Çπ„ÇØÂÆå‰∫Ü„Ç§„Éô„É≥„Éà„ÅÆË≥ºË™≠
                    taskEventSubscription <-
                        Some(
                            collaborationManager.TaskCompleted.Subscribe(fun taskId ->
                                this.UpdateAllDisplays()

                                logDebug
                                    "AgentCollaborationUI"
                                    (sprintf "Task %s completed, refreshing displays" taskId))
                        )

                    logInfo "AgentCollaborationUI" "Event subscriptions started successfully"
                with ex ->
                    logWarning "AgentCollaborationUI" (sprintf "Failed to start event subscriptions: %s" ex.Message))
