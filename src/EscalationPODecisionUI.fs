module FCode.EscalationPODecisionUI

open System
open System.Collections.Generic
open System.Text
open Terminal.Gui
open FCode.EscalationNotificationUI
open FCode.QualityGateManager
open FCode.TaskAssignmentManager
open FCode.Logger
open FCode.ColorSchemes

/// POÂà§Êñ≠ÁµêÊûú
type PODecisionResult =
    | Approved of string // ÊâøË™çÔºàÁêÜÁî±‰ªò„ÅçÔºâ
    | Rejected of string // Âç¥‰∏ãÔºàÁêÜÁî±‰ªò„ÅçÔºâ
    | ModificationRequired of string // ‰øÆÊ≠£Ë¶ÅÊ±ÇÔºàÊåáÁ§∫‰ªò„ÅçÔºâ
    | EscalatedHigher of string // ‰∏ä‰Ωç„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ÔºàÁêÜÁî±‰ªò„ÅçÔºâ
    | MoreInfoRequested of string // ËøΩÂä†ÊÉÖÂ†±Ë¶ÅÊ±ÇÔºàË≥™ÂïèÂÜÖÂÆπ‰ªò„ÅçÔºâ

/// POÂà§Êñ≠UIÁä∂ÊÖã
type PODecisionUIState =
    | Idle
    | AwaitingDecision
    | DecisionProcessing
    | DecisionCompleted

/// POÂà§Êñ≠UIÁµ±ÂêàÊÉÖÂ†±
type PODecisionUIInfo =
    { NotificationId: string
      TaskTitle: string
      NotificationType: EscalationNotificationType
      Urgency: EscalationUrgency
      CreatedAt: DateTime
      RequiredResponseBy: DateTime
      Description: string
      RelatedTaskIds: string list
      PODecisionResult: PODecisionResult option
      UIState: PODecisionUIState
      LastUpdated: DateTime }

/// „Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥POÂà§Êñ≠UIÁÆ°ÁêÜ„ÇØ„É©„Çπ
type EscalationPODecisionUIManager(escalationNotificationManager: EscalationNotificationManager) =

    let mutable currentDecisionInfo: PODecisionUIInfo option = None
    let mutable decisionHistory: PODecisionUIInfo list = []
    let maxHistorySize = 50

    /// „Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ÈÄöÁü•„ÇíPOÂà§Êñ≠UIË°®Á§∫Áî®„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    member this.FormatEscalationForPODecision(notification: EscalationNotification) : string =
        let sb = StringBuilder()

        // Á∑äÊÄ•Â∫¶„Å®„Çø„Ç§„Éó„ÅÆ„Ç¢„Ç§„Ç≥„É≥
        let urgencyIcon =
            match notification.Urgency with
            | EscalationUrgency.Immediate -> "üö®"
            | EscalationUrgency.Urgent -> "‚ö†Ô∏è"
            | EscalationUrgency.Normal -> "üìã"
            | EscalationUrgency.Low -> "üìù"

        let typeIcon =
            match notification.NotificationType with
            | EscalationNotificationType.TechnicalDecision -> "üîß"
            | EscalationNotificationType.QualityGate -> "üéØ"
            | EscalationNotificationType.BusinessDecision -> "üíº"
            | EscalationNotificationType.ResourceRequest -> "üìà"
            | EscalationNotificationType.TimelineExtension -> "‚è∞"
            | EscalationNotificationType.ExternalDependency -> "üîó"

        sb.AppendFormat("üî¥ POÂà§Êñ≠Ë¶ÅÊ±Ç - {0}\n\n", notification.Title) |> ignore

        sb.AppendFormat(
            "{0} Á∑äÊÄ•Â∫¶: {1} | {2} Á®ÆÂà•: {3}\n\n",
            urgencyIcon,
            notification.Urgency,
            typeIcon,
            notification.NotificationType
        )
        |> ignore

        // ÊôÇÈñìÊÉÖÂ†±
        let timeRemaining = notification.RequiredResponseBy - DateTime.UtcNow

        let timeRemainingStr =
            if timeRemaining.TotalMinutes > 0 then
                sprintf
                    "ÊÆã„ÇäÊôÇÈñì: %s"
                    (if timeRemaining.TotalDays >= 1.0 then
                         sprintf "%.1fÊó•" timeRemaining.TotalDays
                     elif timeRemaining.TotalHours >= 1.0 then
                         sprintf "%.1fÊôÇÈñì" timeRemaining.TotalHours
                     else
                         sprintf "%.0fÂàÜ" timeRemaining.TotalMinutes)
            else
                "‚è∞ ÊúüÈôêÂàá„Çå"

        sb.AppendFormat("üìÖ Ë¶ÅÊ±ÇÊó•ÊôÇ: {0:HH:mm:ss}\n", notification.CreatedAt) |> ignore

        sb.AppendFormat("‚è±Ô∏è ÊúüÈôê: {0:HH:mm:ss} ({1})\n\n", notification.RequiredResponseBy, timeRemainingStr)
        |> ignore

        // Ë¶ÅÊ±ÇÂÜÖÂÆπ
        sb.AppendFormat("üìù Âà§Êñ≠Ë¶ÅÊ±ÇÂÜÖÂÆπ:\n{0}\n\n", notification.Description) |> ignore

        // Èñ¢ÈÄ£„Çø„Çπ„ÇØÊÉÖÂ†±
        if notification.RelatedTaskIds.Length > 0 then
            sb.AppendLine("üîó Èñ¢ÈÄ£„Çø„Çπ„ÇØ:") |> ignore

            for taskId in notification.RelatedTaskIds do
                sb.AppendFormat("  ‚Ä¢ {0}\n", taskId) |> ignore

            sb.AppendLine() |> ignore

        // Ë¶ÅÊ±ÇÂÖÉÊÉÖÂ†±
        sb.AppendFormat("üë§ Ë¶ÅÊ±ÇÂÖÉ: {0}\n", notification.RequestingAgent) |> ignore
        sb.AppendFormat("üìç ÂØæË±°: {0}\n\n", notification.TargetRole) |> ignore

        // Âà§Êñ≠ÈÅ∏ÊäûËÇ¢
        sb.AppendLine("üéØ Âà§Êñ≠ÈÅ∏ÊäûËÇ¢:") |> ignore
        sb.AppendLine("  1. ‚úÖ ÊâøË™çÔºàÁêÜÁî±‰ªò„ÅçÔºâ") |> ignore
        sb.AppendLine("  2. ‚ùå Âç¥‰∏ãÔºàÁêÜÁî±‰ªò„ÅçÔºâ") |> ignore
        sb.AppendLine("  3. üîÑ ‰øÆÊ≠£Ë¶ÅÊ±ÇÔºàÊåáÁ§∫‰ªò„ÅçÔºâ") |> ignore
        sb.AppendLine("  4. ‚¨ÜÔ∏è ‰∏ä‰Ωç„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ÔºàÁêÜÁî±‰ªò„ÅçÔºâ") |> ignore
        sb.AppendLine("  5. ‚ùì ËøΩÂä†ÊÉÖÂ†±Ë¶ÅÊ±ÇÔºàË≥™ÂïèÂÜÖÂÆπ‰ªò„ÅçÔºâ") |> ignore

        sb.ToString()

    /// POÂà§Êñ≠ÁµêÊûú„ÇíUIË°®Á§∫Áî®„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    member this.FormatPODecisionResult(decision: PODecisionResult) : string =
        match decision with
        | Approved reason -> sprintf "‚úÖ ÊâøË™ç: %s" reason
        | Rejected reason -> sprintf "‚ùå Âç¥‰∏ã: %s" reason
        | ModificationRequired instruction -> sprintf "üîÑ ‰øÆÊ≠£Ë¶ÅÊ±Ç: %s" instruction
        | EscalatedHigher reason -> sprintf "‚¨ÜÔ∏è ‰∏ä‰Ωç„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥: %s" reason
        | MoreInfoRequested question -> sprintf "‚ùì ËøΩÂä†ÊÉÖÂ†±Ë¶ÅÊ±Ç: %s" question

    /// „Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ÈÄöÁü•„ÇíPOÂà§Êñ≠UIË°®Á§∫„Å´Ë®≠ÂÆö
    member this.DisplayEscalationForPODecision(notification: EscalationNotification, targetView: TextView) : unit =
        try
            let decisionInfo =
                { NotificationId = notification.NotificationId
                  TaskTitle = notification.Title
                  NotificationType = notification.NotificationType
                  Urgency = notification.Urgency
                  CreatedAt = notification.CreatedAt
                  RequiredResponseBy = notification.RequiredResponseBy
                  Description = notification.Description
                  RelatedTaskIds = notification.RelatedTaskIds
                  PODecisionResult = None
                  UIState = AwaitingDecision
                  LastUpdated = DateTime.UtcNow }

            currentDecisionInfo <- Some decisionInfo

            // Âà§Êñ≠ÂæÖÊ©üUIË°®Á§∫
            let displayText = this.FormatEscalationForPODecision(notification)
            targetView.Text <- NStack.ustring.Make(displayText)
            targetView.SetNeedsDisplay()

            logInfo "EscalationPODecisionUI" (sprintf "POÂà§Êñ≠UIË°®Á§∫: %s" notification.NotificationId)

        with ex ->
            logError "EscalationPODecisionUI" (sprintf "POÂà§Êñ≠UIË°®Á§∫„Ç®„É©„Éº: %s" ex.Message)

    /// POÂà§Êñ≠ÂÆüË°åÂá¶ÁêÜ
    member this.ProcessPODecision(notificationId: string, decision: PODecisionResult, responder: string) : bool =
        try
            match currentDecisionInfo with
            | Some info when info.NotificationId = notificationId ->
                // Âà§Êñ≠Âá¶ÁêÜ‰∏≠Áä∂ÊÖã„Å´Ë®≠ÂÆö
                let processingInfo =
                    { info with
                        UIState = DecisionProcessing
                        LastUpdated = DateTime.UtcNow }

                currentDecisionInfo <- Some processingInfo

                // „Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ÈÄöÁü•ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„Å´Âà§Êñ≠ÁµêÊûú„ÇíÈÄÅ‰ø°
                let poAction =
                    match decision with
                    | Approved reason -> ApproveWithComment reason
                    | Rejected reason -> Reject reason
                    | ModificationRequired instruction -> RequestMoreInfo instruction
                    | EscalatedHigher reason -> EscalateToHigher reason
                    | MoreInfoRequested question -> RequestMoreInfo question

                let success =
                    escalationNotificationManager.RespondToNotification(notificationId, poAction, responder)

                if success then
                    // Âà§Êñ≠ÂÆå‰∫ÜÁä∂ÊÖã„Å´Ë®≠ÂÆö
                    let completedInfo =
                        { processingInfo with
                            PODecisionResult = Some decision
                            UIState = DecisionCompleted
                            LastUpdated = DateTime.UtcNow }

                    currentDecisionInfo <- Some completedInfo

                    // Â±•Ê≠¥„Å´ËøΩÂä†
                    decisionHistory <- completedInfo :: decisionHistory

                    if decisionHistory.Length > maxHistorySize then
                        decisionHistory <- decisionHistory |> List.take maxHistorySize

                    logInfo
                        "EscalationPODecisionUI"
                        (sprintf "POÂà§Êñ≠ÂÆå‰∫Ü: %s -> %s" notificationId (this.FormatPODecisionResult(decision)))

                    true
                else
                    logError "EscalationPODecisionUI" (sprintf "POÂà§Êñ≠Âá¶ÁêÜÂ§±Êïó: %s" notificationId)
                    false

            | Some info ->
                logWarning
                    "EscalationPODecisionUI"
                    (sprintf "POÂà§Êñ≠ÂØæË±°‰∏ç‰∏ÄËá¥: ÁèæÂú®=%s, Ë¶ÅÊ±Ç=%s" info.NotificationId notificationId)

                false
            | None ->
                logWarning "EscalationPODecisionUI" (sprintf "POÂà§Êñ≠ÂØæË±°„Å™„Åó: %s" notificationId)
                false

        with ex ->
            logError "EscalationPODecisionUI" (sprintf "POÂà§Êñ≠Âá¶ÁêÜ‰æãÂ§ñ: %s - %s" notificationId ex.Message)
            false

    /// POÂà§Êñ≠ÁµêÊûú„ÇíUIË°®Á§∫„Å´ÂèçÊò†
    member this.UpdatePODecisionResultDisplay(targetView: TextView) : unit =
        try
            match currentDecisionInfo with
            | Some info ->
                let sb = StringBuilder()

                sb.AppendFormat("üìä POÂà§Êñ≠ÁµêÊûú\n\n") |> ignore
                sb.AppendFormat("ÈÄöÁü•ID: {0}\n", info.NotificationId) |> ignore
                sb.AppendFormat("„Çø„Çπ„ÇØ: {0}\n", info.TaskTitle) |> ignore
                sb.AppendFormat("Âà§Êñ≠ÊôÇÂàª: {0:HH:mm:ss}\n\n", info.LastUpdated) |> ignore

                match info.PODecisionResult with
                | Some decision ->
                    sb.AppendFormat("Âà§Êñ≠ÁµêÊûú: {0}\n\n", this.FormatPODecisionResult(decision))
                    |> ignore

                    // Ê¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥ÊèêÊ°à
                    sb.AppendLine("üöÄ Ê¨°„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥:") |> ignore

                    match decision with
                    | Approved _ -> sb.AppendLine("‚úÖ ÊâøË™çÊ∏à„Åø - ÂÆüË£ÖÁ∂ôÁ∂ö") |> ignore
                    | Rejected _ -> sb.AppendLine("‚ùå Âç¥‰∏ã - Ë¶Å‰ª∂ÂÜçÊ§úË®é") |> ignore
                    | ModificationRequired _ -> sb.AppendLine("üîÑ ‰øÆÊ≠£Ë¶ÅÊ±Ç - ÊåáÁ§∫„Å´Âæì„Å£„Å¶‰øÆÊ≠£") |> ignore
                    | EscalatedHigher _ -> sb.AppendLine("‚¨ÜÔ∏è ‰∏ä‰Ωç„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ - ‰∏ä‰ΩçÂà§Êñ≠ÂæÖ„Å°") |> ignore
                    | MoreInfoRequested _ -> sb.AppendLine("‚ùì ËøΩÂä†ÊÉÖÂ†±Ë¶ÅÊ±Ç - ÊÉÖÂ†±Êèê‰æõÂæÖ„Å°") |> ignore

                | None -> sb.AppendLine("Âà§Êñ≠ÁµêÊûú: Âá¶ÁêÜ‰∏≠...") |> ignore

                sb.AppendFormat("Áä∂ÊÖã: {0}\n", info.UIState) |> ignore

                targetView.Text <- NStack.ustring.Make(sb.ToString())
                targetView.SetNeedsDisplay()

            | None ->
                targetView.Text <- NStack.ustring.Make("POÂà§Êñ≠ÂæÖÊ©ü\n\n„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ÈÄöÁü•„ÇíÂèó‰ø°„Åô„Çã„Å®„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ")
                targetView.SetNeedsDisplay()

        with ex ->
            logError "EscalationPODecisionUI" (sprintf "POÂà§Êñ≠ÁµêÊûúË°®Á§∫Êõ¥Êñ∞„Ç®„É©„Éº: %s" ex.Message)

    /// ÁèæÂú®„ÅÆPOÂà§Êñ≠UIÁä∂ÊÖã„ÇíÂèñÂæó
    member this.GetCurrentPODecisionState() : PODecisionUIState option =
        currentDecisionInfo |> Option.map (fun info -> info.UIState)

    /// ÁèæÂú®„ÅÆPOÂà§Êñ≠UIÊÉÖÂ†±„ÇíÂèñÂæó
    member this.GetCurrentPODecisionInfo() : PODecisionUIInfo option = currentDecisionInfo

    /// POÂà§Êñ≠Â±•Ê≠¥„ÇíÂèñÂæó
    member this.GetPODecisionHistory() : PODecisionUIInfo list = decisionHistory

    /// POÂà§Êñ≠UIË°®Á§∫„Çí„ÇØ„É™„Ç¢
    member this.ClearPODecisionDisplay(targetView: TextView) : unit =
        currentDecisionInfo <- None
        targetView.Text <- NStack.ustring.Make("POÂà§Êñ≠ÂæÖÊ©ü\n\n„Ç®„Çπ„Ç´„É¨„Éº„Ç∑„Éß„É≥ÈÄöÁü•„ÇíÂèó‰ø°„Åô„Çã„Å®„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ")
        targetView.SetNeedsDisplay()
        logInfo "EscalationPODecisionUI" "POÂà§Êñ≠UIË°®Á§∫„ÇØ„É™„Ç¢ÂÆå‰∫Ü"

    /// POÂà§Êñ≠Áµ±Ë®àÊÉÖÂ†±„ÇíÁîüÊàê
    member this.GeneratePODecisionStatistics() : string =
        let sb = StringBuilder()

        sb.AppendFormat("üìä POÂà§Êñ≠Áµ±Ë®à\n\n") |> ignore
        sb.AppendFormat("ÁèæÂú®ÊôÇÂàª: {0:HH:mm:ss}\n", DateTime.UtcNow) |> ignore

        match currentDecisionInfo with
        | Some info ->
            sb.AppendFormat("„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÈÄöÁü•: {0}\n", info.TaskTitle) |> ignore
            sb.AppendFormat("Á∑äÊÄ•Â∫¶: {0}\n", info.Urgency) |> ignore
            sb.AppendFormat("Áä∂ÊÖã: {0}\n", info.UIState) |> ignore
            sb.AppendFormat("ÊúÄÁµÇÊõ¥Êñ∞: {0:HH:mm:ss}\n", info.LastUpdated) |> ignore

            let timeRemaining = info.RequiredResponseBy - DateTime.UtcNow

            if timeRemaining.TotalMinutes > 0 then
                sb.AppendFormat("ÊÆã„ÇäÊôÇÈñì: %.0fÂàÜ\n", timeRemaining.TotalMinutes) |> ignore
            else
                sb.AppendLine("‚è∞ ÊúüÈôêÂàá„Çå") |> ignore
        | None -> sb.AppendLine("„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÈÄöÁü•: „Å™„Åó") |> ignore

        sb.AppendFormat("Âà§Êñ≠Â±•Ê≠¥: {0}‰ª∂\n", decisionHistory.Length) |> ignore

        if decisionHistory.Length > 0 then
            sb.AppendLine("\nÊúÄËøë„ÅÆÂà§Êñ≠:") |> ignore

            for i, decision in decisionHistory |> List.take (min 3 decisionHistory.Length) |> List.indexed do
                match decision.PODecisionResult with
                | Some result ->
                    sb.AppendFormat(
                        "  {0}. {1} ({2:HH:mm:ss})\n",
                        i + 1,
                        this.FormatPODecisionResult(result),
                        decision.LastUpdated
                    )
                    |> ignore
                | None -> ()

        sb.ToString()

    /// POÂà§Êñ≠UI„ÅÆÁ∑äÊÄ•Â∫¶„Éô„Éº„Çπ„ÅÆËâ≤Ë®≠ÂÆö
    member this.GetUrgencyColorScheme(urgency: EscalationUrgency) : ColorScheme =
        match urgency with
        | EscalationUrgency.Immediate -> defaultScheme
        | EscalationUrgency.Urgent -> defaultScheme
        | EscalationUrgency.Normal -> defaultScheme
        | EscalationUrgency.Low -> defaultScheme
