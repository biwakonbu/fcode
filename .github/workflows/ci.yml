name: CI

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  format-lint-test-build:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    # NuGet パッケージキャッシュ
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.fsproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    # 1. フォーマットチェック
    - name: Check F# formatting
      run: |
        dotnet tool install -g fantomas
        fantomas --check src/ tests/
    
    # 2. リント (F# Analyzer + 警告チェック - FSharpLintはCI環境で不安定なため代替手段使用)
    - name: Restore dependencies for linting
      run: |
        dotnet restore src/fcode.fsproj
        dotnet restore tests/fcode.Tests.fsproj
    
    - name: Run F# linting
      run: |
        echo "🔧 Building with detailed warnings for SOLID refactoring..."
        dotnet build src/fcode.fsproj --configuration Debug --verbosity normal -p:TreatWarningsAsErrors=true -p:WarningsNotAsErrors=FS0760
        echo "✅ Build completed with acceptable warnings"
    
    # 3. テスト品質チェック
    - name: Verify test categorization
      run: |
        echo "📊 Verifying test categorization by examining source files..."
        
        # Count TestFixture and Test methods to ensure proper categorization
        TESTFIXTURE_COUNT=$(find tests -name "*.fs" -exec grep -c "\[<TestFixture>\]" {} \; | awk '{sum += $1} END {print sum}')
        CATEGORY_COUNT=$(find tests -name "*.fs" -exec grep -c "\[<Category" {} \; | awk '{sum += $1} END {print sum}')
        TEST_COUNT=$(find tests -name "*.fs" -exec grep -c "\[<Test>" {} \; | awk '{sum += $1} END {print sum}')
        
        echo "  TestFixture count: $TESTFIXTURE_COUNT"
        echo "  Category attributes found: $CATEGORY_COUNT"
        echo "  Test methods found: $TEST_COUNT"
        
        # Ensure we have sufficient categorization (TestFixture categories cover multiple tests)
        if [ "$CATEGORY_COUNT" -ge "$TESTFIXTURE_COUNT" ]; then
          echo "✅ Test categorization verified: $TESTFIXTURE_COUNT TestFixtures with $CATEGORY_COUNT categories for $TEST_COUNT tests"
        else
          echo "❌ Insufficient categories: Need at least one category per TestFixture ($TESTFIXTURE_COUNT TestFixtures, $CATEGORY_COUNT categories)"
          exit 1
        fi
    
    # 4. テスト実行 (30秒タイムアウト・UI依存テスト除外)
    - name: Run CI-safe unit tests
      run: dotnet test tests/fcode.Tests.fsproj --configuration Debug --verbosity quiet --logger trx --results-directory TestResults --filter "TestCategory=Unit&TestCategory!=UI" --blame-hang-timeout 30000ms --blame-crash --nologo 2>/dev/null
      env:
        TERM: dumb
        CI: true
        TERMINFO: /dev/null
        NO_COLOR: 1
        
    # 5. CI安全テスト数検証
    - name: Verify CI-safe test count
      run: |
        CI_SAFE=$(dotnet test tests/fcode.Tests.fsproj --filter "TestCategory=Unit&TestCategory!=UI" --list-tests | wc -l)
        echo "✅ CI安全テスト数: $CI_SAFE"
        if [ $CI_SAFE -lt 150 ]; then
          echo "⚠️  CI安全テストが少ないです（期待値: 150以上）"
        fi
    
    # - name: Upload test results
    #   uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: test-results
    #     path: TestResults/
    
    # 4. リリースビルド
    - name: Build release
      run: |
        dotnet build src/fcode.fsproj --configuration Release --verbosity normal
    
    # Linux向け単一ファイルパブリッシュ
    - name: Publish Linux x64
      run: dotnet publish src/fcode.fsproj -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -o publish/linux-x64

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: fcode-linux-x64
        path: publish/linux-x64/fcode

# build-macos:
#   runs-on: macos-latest
#   needs: format-lint-test-build
#   env:
#     DOTNET_CLI_TELEMETRY_OPTOUT: "1"
#
#   steps:
#   - uses: actions/checkout@v4
#
#   - name: Setup .NET
#     uses: actions/setup-dotnet@v4
#     with:
#       dotnet-version: '8.0.x'
#
#   # NuGet パッケージキャッシュ
#   - name: Cache NuGet packages
#     uses: actions/cache@v4
#     with:
#       path: ~/.nuget/packages
#       key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.fsproj') }}
#       restore-keys: |
#         ${{ runner.os }}-nuget-
#
#   - name: Restore dependencies
#     run: |
#       dotnet restore src/fcode.fsproj --verbosity normal
#       dotnet restore tests/fcode.Tests.fsproj --verbosity normal
#
#   - name: Run CI-safe unit tests on macOS
#     run: dotnet test tests/fcode.Tests.fsproj --configuration Debug --verbosity minimal --filter "TestCategory=Unit&TestCategory!=UI" --blame-hang-timeout 90000ms
#     env:
#       TERM: xterm
#       CI: true
#
#   # macOS向け単一ファイルパブリッシュ
#   - name: Publish macOS x64
#     run: dotnet publish src/fcode.fsproj -c Release -r osx-x64 --self-contained true -p:PublishSingleFile=true -o publish/osx-x64
#
#   - name: Upload macOS artifact
#     uses: actions/upload-artifact@v4
#     with:
#       name: fcode-macos-x64
#       path: publish/osx-x64/fcode